{
	"Package": {
		"prefix": "pck",
		"body": [
			"package ${1:Package}"
		],
		"description": "Create package-declaration"
	},
	"Case class": {
		"prefix": "cc",
		"body": [
		  "case class ${1:Class}(${2}) {",
		  "  ${3}",
		  "}"
		],
		"description": "Case class declaration"
	  },
	"Class": {
	  "prefix": "cl",
	  "body": [
			"class ${1:Class}(${2}) {",
			"  ${3}",
			"}"
	  ],
	  "description": "Class declaration"
	},
	"Class with companion": {
	  "prefix": "clo",
	  "body": [
			"class ${1:Class}(${2}) {",
			"  ${3}",
			"}",
			"object $1 {",
			"  def apply(${2}): $1 = new $1(${2})",
			"}"
	  ],
	  "description": "Class with companion-object declaration"
	},
	"Object": {
	  "prefix": "obj",
	  "body": [
			"object ${1:Object} {",
			"  ${2}",
			"}"
	  ],
	  "description": "Object declaration"
	},
	"Test class": {
	  "prefix": "tstcl",
	  "body": [
			"import org.scalatest.{WordSpec, Matchers}",
			"\n",
			"class ${1:Class}Spec extends WordSpec with Matchers {",
			"  \"${2:Someone}\" when {",
			"    \"${3:sthHappens}\" should {",
			"      \"${4:soSth}\" in {",
			"        ${5}",
			"      }",
			"    }",
			"  }",
			"}"
	  ],
	  "description": "Object declaration"
	},
	"Print to console": {
	  "prefix": "prl",
	  "body": [
		"println('$1');"
	  ],
	  "description": "Log output to console"
	},
	"If expression": {
	  "prefix": "if",
	  "body": [
		"if (${1})",
		"  ${0}"
	  ],
	  "description": "If expression"
	},
	"If not expression": {
	  "prefix": "ifn",
	  "body": [
		"if (!${1})",
		"  ${0}"
	  ],
	  "description": "If not expression"
	},
	"If else expression": {
	  "prefix": "ife",
	  "body": [
		"if (${1})",
		"  ${2}",
		"else",
		"  ${0}"
	  ],
	  "description": "If else expression"
	},
	"If else if expression": {
	  "prefix": "ifeif",
	  "body": [
		"if (${1})",
		"  ${2}",
		"else if (${3})",
		"  ${0}"
	  ],
	  "description": "If else if expression"
	},
	"Else if expression": {
	  "prefix": "eif",
	  "body": [
		"else if (${3})",
		"  ${0}"
	  ],
	  "description": "Else if expression"
	},
	"While expression": {
	  "prefix": "wh",
	  "body": [
		"while (${1:obj}) {",
		"  ${0}",
		"}"
	  ],
	  "description": "While expression"
	},
	"For loop classic expression": {
	  "prefix": "for",
	  "body": [
		"for (${1:item} <- ${2:obj}) {",
		"  ${0}",
		"}"
	  ],
	  "description": "For loop classic expression"
	},
	"For loop indexed expression": {
	  "prefix": "fori",
	  "body": [
		"for (${1:i} <- ${2:0} to ${3:obj}.length) {",
		"  ${0}",
		"}"
	  ],
	  "description": "For loop indexed expression"
	},
	"For comprehension": {
	  "prefix": "fory",
	  "body": [
		"for {",
		"  ${1:item} <- ${2:obj}",
		"} yield ${0}"
	  ],
	  "description": "For comprehension"
	},
	"Try expression": {
	  "prefix": "try",
	  "body": [
		"try {",
		"  ${1}",
		"} catch {",
		"  case e: ${2} => ${3}",
		"} finally {",
		"  ${0}",
		"}"
	  ],
	  "description": "Try expression"
	},
	"Match expression": {
	  "prefix": "match",
	  "body": [
		"${1:obj} match {",
		"  case ${2:e} => ${3}",
		"  case _ => ${0}",
		"}"
	  ],
	  "description": "Match expression"
	},
	"Case expression": {
	  "prefix": "case",
	  "body": [
		"case ${1:value} => ${0}"
	  ],
	  "description": "Case expression"
	},
	"Main method": {
	  "prefix": "main",
	  "body": [
			"def main(args: Array[String]): Unit = {",
			"  $1",
			"}"
	  ],
	  "description": "Main method declaration"
	},
	"Main object + main method": {
	  "prefix": "mainmain",
	  "body": [
			"object Main {",
			"  def main(args: Array[String]): Unit = {",
			"    $1",
			"  }",
			"}"
	  ],
	  "description": "Main object with main method declaration"
	},
	"Function expression": {
	  "prefix": "def",
	  "body": [
		"def ${1:name}(${2:arg}) = ${0:}"
	  ],
	  "description": "Function expression"
	},
	"Private function expression": {
	  "prefix": "prdef",
	  "body": [
		"private def ${1:name}(${2:arg}) = ${0:}"
	  ],
	  "description": "Private function expression"
	},
	"Override function expression": {
	  "prefix": "ovdef",
	  "body": [
		"override def ${1:name}(${2:arg}) = ${0:}"
	  ],
	  "description": "Override function expression"
	},
	"Enumeration": {
	  "prefix": "enum",
	  "body": [
		"object ${1:MyEnumeration} extends Enumeration {",
		"  type $1 = Value",
		"  val ${2:${3:MyEnumeration1}, ${4:MyEnumeration2}} = Value",
		"}",
		"${5:import $1._}",
		"${0}"
	  ],
	  "description": "Enumeration"
	},
	"Import mutable": {
	  "prefix": "mutbl",
	  "body": [
		"import scala.collection.{ mutable, immutable, generic }"
	  ],
	  "description": "Import mutable"
	},
	"Basic imports": {
	  "prefix": "imp",
	  "body": [
		"import scala.language.postfixOps",
		"import scala.concurrent.duration._",
		"import scala.concurrent.{Await, Awaitable, Future}",
		"// import scala.concurrent.ExecutionContext.Implicits.global",
		"import scala.util.{Failure, Success, Try}",
		"import com.typesafe.scalalogging.LazyLogging",
		"import scala.collection.JavaConverters._",
		"// import org.scalatest.time.Span",
		"// import org.scalatest.time.{Second,Millis}",
		"// import org.scalatest.concurrent.Eventually._",
		"// import org.scalatest.{WordSpec, _}",
		"// import akka.http.scaladsl.model.ContentTypes._",
		"// import akka.http.scaladsl.model.headers._"
	  ],
	  "description": "Common used imports"
	},
}
